@page "/rootrequirements"

@using Data;
@using System.ComponentModel.DataAnnotations;
@using BlazBeaver.Interfaces;
@using BlazBeaver.Components;
@using System.Text;

@inject ISnackbar Snackbar
@inject IRequirementsRepository RR;
@inject IDialogService DialogService;
@inject IBasicsSettingsRepository BS;
@inject ISearchRequirements SR;

<PageTitle>Requirements</PageTitle>

<MudGrid>
    @if (@loadingError)
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Error vhen loading the requirements</MudAlert>
        </MudItem>
    }
    <MudItem xs="12">
        <MudText Typo="Typo.h5">Requirements</MudText>
    </MudItem>
    <MudItem xs="4">
        <MudPaper>
            <FileBrowser @ref="fileBrowser" OnTreeItemSelected="OnTreeItemSelectedAsync" 
                                            OnNewRequirement="OnNewRequirementAsync"
                                            OnLoading="OnRequirementsLoading"
                                            OnLoaded="OnRequirementsLoaded" />
        </MudPaper>
    </MudItem>

    <MudItem xs="8" >
        <MudStack>
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel Text="Search">
                    <Search RunSearch="OnSearch" />
                </MudExpansionPanel>
                <MudExpansionPanel Text="Search Results" IsExpanded="@searchResultsExpanded" IsExpandedChanged="OnSearchResultsExpansionChanged">
                    <SearchResults FoundRequirements="@foundRequirements" OnSearchResultSelected="OnSearchResultSelectedAsync" />
                </MudExpansionPanel>
            </MudExpansionPanels>

            <MudPaper style="padding-left: 1em; padding-right: 1em">
                @if (_selectionMode == SelectionMode.NoSelection || (_selectionMode == SelectionMode.SelectedFromTree && (_selectedItem == null || _selectedItem.IsFolder)))
                {
                    @if (requirementsAreLoading)
                    {
                        <MudText Typo="Typo.body1">Please wait...</MudText>
                    }
                    else
                    {   
                        @if (rootRequirementsFolderInfo == null)
                        {
                            <MudText Typo="Typo.body1">You are on a folder, please select a requirement.</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1"><b>Requirements statistics:</b></MudText>
                            <MudText Typo="Typo.body1">@rootRequirementsFolderInfo["TotalReqs"] requirements found</MudText>
                            <MudText Typo="Typo.body1">Those requirements are contained in @rootRequirementsFolderInfo["TotalFolders"] folders or subfolders.</MudText>
                        }
                    }
                }
                else
                {
                    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField Label="Title" Required="true" RequiredError="Requirement title is required!" 
                                                @bind-Value="model.Title" For="@(() => model.Title)"/>
                            </MudItem>
                            <MudItem xs="4">
                                <MudCheckBox @bind-Checked="model.IsSafety" For="@(() => model.IsSafety)">Safety Risk</MudCheckBox>
                            </MudItem>
                            <MudItem xs="8">
                                <MudSelect Placeholder="Type of Requirement" @bind-Value="model.TypeOfRequirement" For="@(() => model.TypeOfRequirement)">
                                    @foreach (string typeOfRequirement in Helpers.ReqAndProcProperties.TypesOfRequirement)
                                    {
                                        <MudSelectItem Value=@typeOfRequirement />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText>Requirement Description</MudText>
                                <MarkdownEditor @bind-Value="@model.Description"
                                                @ref="mdDescription" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField Label="SRA Ids" Required="false"
                                                @bind-Value="model.SRAIds" For="@(() => model.SRAIds)"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Label="Created in version" Required="false"
                                                @bind-Value="model.CreatedInVersion" For="@(() => model.CreatedInVersion)"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Label="Deprecated in version" Required="false"
                                                @bind-Value="model.DeprecatedInVersion" For="@(() => model.DeprecatedInVersion)"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudChipSet AllClosable="true" OnClose="UnselectComponent">
                                    @foreach (var value in selectedComponents)
                                    {
                                        <MudChip Text="@value"></MudChip>
                                    }
                                </MudChipSet>
                                Components <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OnSelectComponentsAsync"></MudIconButton>
                            </MudItem>
                            <MudItem xs="6">
                                <MudChipSet AllClosable="true" OnClose="UnselectSU">
                                    @foreach (var value in selectedSU)
                                    {
                                        <MudChip Text="@value"></MudChip>
                                    }
                                </MudChipSet>
                                Software Units <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OnSelectSUsAsync"></MudIconButton>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField Label="Protocols Ids" Required="false"
                                                @bind-Value="model.AssociatedProtocolsIds" For="@(() => model.AssociatedProtocolsIds)"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText>Requirement Changelog</MudText>
                                <MarkdownEditor @bind-Value="@model.Changelog"
                                                @ref="mdChangelog" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton  MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                }
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>



@code {
    enum SelectionMode {
        NoSelection,
        SelectedFromTree,
        SelectedFromSearch
    }

    FileBrowser fileBrowser;    //Reference to the file browser
    MarkdownEditor mdDescription;
    MarkdownEditor mdChangelog;

    private TreeItemData _selectedItem; 

    string[] errors = { };

    bool requirementsAreLoading = false;
    Dictionary<string, int> rootRequirementsFolderInfo = null;

    bool loadingError = false;

    RequirementEditionForm model = new RequirementEditionForm();
    Requirement selectedRequirement;

    List<string> selectedComponents = new List<string>();
    List<string> selectedSU = new List<string>();

    IEnumerable<Requirement> foundRequirements = new List<Requirement>();
    bool searchResultsExpanded = false;
    
    SelectionMode _selectionMode = SelectionMode.NoSelection;  

    private async Task OnTreeItemSelectedAsync(TreeItemData selectedValue)
    {
        rootRequirementsFolderInfo = null;
        _selectedItem = selectedValue;
        _selectionMode = SelectionMode.SelectedFromTree;

        if (!_selectedItem.IsFolder)
        {
            await LoadRequirementFromUrl(selectedValue.Url);
        }
    }

    private async Task OnNewRequirementAsync()
    {
        model.Components.Clear();
        model.Changelog = string.Empty;
        model.Description = string.Empty;
        model.Title = string.Empty;
        model.CreatedInVersion = string.Empty;
        model.DeprecatedInVersion = string.Empty;
        model.SoftwareUnits.Clear();
        model.AssociatedProtocolsIds = string.Empty;
        model.TypeOfRequirement = string.Empty;
        model.Guid = string.Empty;
        model.IsSafety = false;
        model.SRAIds = string.Empty;

        selectedComponents.Clear();
        selectedSU.Clear();     
        selectedRequirement = null;  
        await mdDescription.SetValueAsync(string.Empty);
        await mdChangelog.SetValueAsync(string.Empty);
    }

    private async Task OnSelectComponentsAsync()
    {
        IEnumerable<string> allComponents = BS.GetAll(Helpers.FilesSettings.ComponentsSetting);
        DialogResult result = await DisplayComponentsSelectorDialogAsync(allComponents);

        if (!result.Canceled)
        {
            HashSet<string> results = result.Data as HashSet<string> ?? new HashSet<string>();
            selectedComponents.AddRange(results.ToList());
        }
    }

    private void OnRequirementsLoading()
    {
        requirementsAreLoading = true;
    }

    private void OnRequirementsLoaded(Dictionary<string, int> stats)
    {
        rootRequirementsFolderInfo = stats;
        requirementsAreLoading = false;
    }

    private void OnSearch(SearchInstructions searchCriteria)
    {
        foundRequirements = SR.Search(searchCriteria);
        searchResultsExpanded = true;
    }

    private async Task OnSearchResultSelectedAsync(Requirement requirement)
    {
        _selectionMode = SelectionMode.SelectedFromSearch;
        await LoadRequirementFromUrl(requirement.Url);
    }

    private void OnSearchResultsExpansionChanged(bool newState)
    {
        searchResultsExpanded = newState;
    }

    private void UnselectComponent(MudChip chip) => selectedComponents.Remove(chip.Text);

    private async Task OnSelectSUsAsync()
    {
        IEnumerable<string> allSU = BS.GetAll(Helpers.FilesSettings.SoftwareUnitsSetting);
        DialogResult result = await DisplayComponentsSelectorDialogAsync(allSU);

        if (!result.Canceled)
        {
            HashSet<string> results = result.Data as HashSet<string> ?? new HashSet<string>();
            selectedSU.AddRange(results.ToList());
        }
    }

    private  void UnselectSU(MudChip chip) => selectedSU.Remove(chip.Text);

    Task OnMarkdownDescrChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownChlogChanged(string value)
    {
        return Task.CompletedTask;
    }

    private void OnValidSubmit(EditContext context)
    {
        //success = true;

        RequirementEditionForm formContext = context.Model as RequirementEditionForm;

        if (selectedRequirement == null)
        {
            selectedRequirement = new Requirement();
        }

        selectedRequirement.Guid = string.IsNullOrEmpty(formContext.Guid) ? Guid.NewGuid().ToString() : formContext.Guid; 
        selectedRequirement.Id = Helpers.TitleAndIdTransformation.GetId(formContext.Title);
        selectedRequirement.Title = Helpers.TitleAndIdTransformation.GetTitle(formContext.Title);
        selectedRequirement.TypeOfRequirement = formContext.TypeOfRequirement;
        selectedRequirement.Components = selectedComponents;
        selectedRequirement.SoftwareUnits = selectedSU;
        selectedRequirement.SRAIds = formContext.SRAIds;
        selectedRequirement.CreatedInVersion = formContext.CreatedInVersion;
        selectedRequirement.DeprecatedInVersion = formContext.DeprecatedInVersion;
        selectedRequirement.IsSafety = formContext.IsSafety;
        selectedRequirement.Description = formContext.Description;
        selectedRequirement.Changelog = formContext.Changelog;
        selectedRequirement.AssociatedProtocolsIds = formContext.AssociatedProtocolsIds;

        string folderUrl = string.Empty;
        if (_selectedItem != null && _selectedItem.IsFolder)
        {
            folderUrl = _selectedItem.Url;
        }
        else if (_selectedItem == null)
        {
            folderUrl = Helpers.FilesSettings.RequirementsFolderLocation;
        }
        else
        {
            folderUrl = Path.GetDirectoryName(_selectedItem.Url);
        }

        string requirementFormerUrl = selectedRequirement.Url;

        string requirementUrl = RR.SaveRequirement(selectedRequirement, folderUrl);
        if (string.IsNullOrEmpty(requirementUrl))
        {
            Snackbar.Add("Saving didn't go as expected. Please check your git diff.", Severity.Success);
        }
        else
        {
            fileBrowser.UpdateTreeWithNewRequirement(selectedRequirement, requirementFormerUrl);
            Snackbar.Add("Requirement saved.", Severity.Success);
        }
    }

    private async Task<DialogResult> DisplayComponentsSelectorDialogAsync(IEnumerable<string> allItems)
    {
        var parameters = new DialogParameters<SettingsSelectorDialog>();
        parameters.Add(x => x.AllItems, allItems.ToHashSet());

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large };

        var dialog = await DialogService.ShowAsync<SettingsSelectorDialog>("Selection", parameters, options);
        
        return await dialog.Result;      
    }

    private async Task LoadRequirementFromUrl(string url)
    {
        Requirement selectedReq = RR.GetRequirement(url);
        selectedRequirement = selectedReq;

        MapRequirementToModel(selectedReq);
        await mdDescription.SetValueAsync(selectedReq.Description);
        await mdChangelog.SetValueAsync(selectedReq.Changelog);
    }

    private void MapRequirementToModel(Requirement req)
    {
        model.Guid = req.Guid;
        model.Title = string.Concat(req.Id, " ", req.Title);
        model.IsSafety = req.IsSafety;
        model.TypeOfRequirement = req.TypeOfRequirement;
        model.CreatedInVersion = req.CreatedInVersion;
        model.DeprecatedInVersion = req.DeprecatedInVersion;
        model.SoftwareUnits = req.SoftwareUnits;
        selectedSU = req.SoftwareUnits;
        model.Components = req.Components;
        selectedComponents = req.Components;
        model.Changelog = req.Changelog;
        model.AssociatedProtocolsIds = req.AssociatedProtocolsIds;
        model.Description = req.Description;
        model.SRAIds = req.SRAIds;
    }
}