@page "/rootrequirements"

@using Data;
@using System.ComponentModel.DataAnnotations;
@using BlazBeaver.Interfaces;
@using BlazBeaver.Components;
@using System.Text;

@implements IDisposable

@inject IOptions<AppSettingsOptions> Configuration;
@inject ISnackbar Snackbar
@inject IRequirementsRepository RR;
@inject IDialogService DialogService;
@inject IBasicsSettingsRepository BS;
@inject ISearchRequirements SR;
@inject IIdProvider IdProvider;

<PageTitle>Requirements</PageTitle>

<MudGrid >
    @if (@loadingError)
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Error vhen loading the requirements</MudAlert>
        </MudItem>
    }

    <MudItem xs="12">
        <MudText Typo="Typo.h5">Requirements</MudText>
    </MudItem>

    @if (Configuration.Value.DisplayBrowser)
    {
        <MudItem xs="4">
            <MudPaper>
                <FileBrowser @ref="fileBrowser" OnTreeItemSelected="OnTreeItemSelectedAsync" 
                                                OnNewRequirement="OnNewRequirementAsync"
                                                OnLoading="OnTreeLoading"
                                                OnLoaded="OnTreeLoaded" />
            </MudPaper>
        </MudItem>
    }
    else
    {
        <!-- Very unelegant way to center the details panel 
             I have tried with some CSS but either there is a bug
             or my competency is too limited (which is highly probable -->
        <MudItem xs="2" />
    }

    <MudItem xs="8" >
        <MudStack>
            <MudExpansionPanels MultiExpansion="true">
                
                <!-- Displays the loading progress only if not already displayed in the browser -->
                @if(loadingInProgress && !Configuration.Value.DisplayBrowser)
                {
                    <MudExpansionPanel Text="Loading..." IsExpanded="true">
                        <LoadingPanel />
                    </MudExpansionPanel>
                }

                @if(!loadingInProgress)
                {
                    <MudExpansionPanel Text="Search">
                        <Search RunSearch="OnSearch" OnNewRequirement="OnNewRequirementAsync" />
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Search Results" IsExpanded="@searchResultsExpanded" IsExpandedChanged="OnSearchResultsExpansionChanged">
                        <SearchResults FoundRequirements="@foundRequirements" OnSearchResultSelected="OnSearchResultSelectedAsync" />
                    </MudExpansionPanel>
                }

                <MudExpansionPanel Text="Details" IsExpanded="@detailsExpanded" IsExpandedChanged="OnDetailsExpansionChanged">
                    
                    @if (loadingInProgress)
                    {
                        <MudText Typo="Typo.body1">Please wait...</MudText>
                    }
                    else if (_selectionMode == SelectionMode.NoSelection && _requirementState != RequirementState.New)
                    {
                        @if (requirementsStatistics != null)
                        {
                            <MudText Typo="Typo.body1"><b>Requirements statistics:</b></MudText>
                            <MudText Typo="Typo.body1">@requirementsStatistics["TotalReqs"] requirements found</MudText>
                            <MudText Typo="Typo.body1">Those requirements are contained in @requirementsStatistics["TotalFolders"] folders or subfolders.</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1">Case not managed, I don't know what to display 1</MudText>
                        }
                    }
                    else if (_selectionMode == SelectionMode.SelectedFromTreeFolder && _requirementState != RequirementState.New)
                    {
                        <MudText Typo="Typo.body1">You are on a folder, please select or create a requirement.</MudText>
                    }
                    else
                    {
                        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudTextField Label="Title" Required="true" RequiredError="Requirement title is required!" 
                                                    Style="font-weight: bold;"
                                                    @bind-Value="model.Title" For="@(() => model.Title)"/>
                                </MudItem>
                                <MudItem xs="4">
                                    <MudCheckBox @bind-Checked="model.IsSafety" For="@(() => model.IsSafety)">Safety Risk</MudCheckBox>
                                </MudItem>
                                <MudItem xs="8">
                                    <MudSelect Placeholder="Type of Requirement" @bind-Value="model.TypeOfRequirement" For="@(() => model.TypeOfRequirement)">
                                        @foreach (string typeOfRequirement in Helpers.ReqAndProcProperties.TypesOfRequirement)
                                        {
                                            <MudSelectItem Value=@typeOfRequirement />
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText>Requirement Description</MudText>
                                    <MarkdownEditor @bind-Value="@model.Description"
                                                    @ref="mdDescription" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField Label="SRA Ids" Required="false"
                                                    @bind-Value="model.SRAIds" For="@(() => model.SRAIds)"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Created in version" Required="false"
                                                    @bind-Value="model.CreatedInVersion" For="@(() => model.CreatedInVersion)"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Deprecated in version" Required="false"
                                                    @bind-Value="model.DeprecatedInVersion" For="@(() => model.DeprecatedInVersion)"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudChipSet AllClosable="true" OnClose="UnselectComponent">
                                        @foreach (var value in selectedComponents)
                                        {
                                            <MudChip Text="@value"></MudChip>
                                        }
                                    </MudChipSet>
                                    Components <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OnSelectComponentsAsync"></MudIconButton>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudChipSet AllClosable="true" OnClose="UnselectSU">
                                        @foreach (var value in selectedSU)
                                        {
                                            <MudChip Text="@value"></MudChip>
                                        }
                                    </MudChipSet>
                                    Software Units <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OnSelectSUsAsync"></MudIconButton>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField Label="Protocols Ids" Required="false"
                                                    @bind-Value="model.AssociatedProtocolsIds" For="@(() => model.AssociatedProtocolsIds)"/>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText>Requirement Changelog</MudText>
                                    <MarkdownEditor @bind-Value="@model.Changelog"
                                                    @ref="mdChangelog" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudButton ButtonType="ButtonType.Submit" 
                                                Variant="Variant.Filled" Color="Color.Primary" Style="float: right;">Save</MudButton>
                                    
                                    @if (!Configuration.Value.DisplayBrowser)
                                    {
                                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnDeleteAsync" >Delete</MudButton>
                                    }
                                </MudItem>
                            </MudGrid>
                        </EditForm>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudStack>
    </MudItem>
</MudGrid>


@code {
    enum SelectionMode {
        NoSelection,
        SelectedFromTreeFolder,
        SelectedFromTreeReq,
        SelectedFromSearch
    }

    enum RequirementState {
        None,
        New,
        ReadOrUpdate
    }

    FileBrowser fileBrowser;    //Reference to the file browser
    MarkdownEditor mdDescription;
    MarkdownEditor mdChangelog;

    private TreeItemData _selectedItem; 

    string[] errors = { };

    bool requirementsAreLoading = false;
    bool treeIsLoading = false;
    bool loadingInProgress 
    {
        get 
        {
            return requirementsAreLoading || treeIsLoading;
        }
    }
    Dictionary<string, int> requirementsStatistics = null;

    bool loadingError = false;

    RequirementEditionForm model = new RequirementEditionForm();
    Requirement selectedRequirement;

    List<string> selectedComponents = new List<string>();
    List<string> selectedSU = new List<string>();

    IEnumerable<Requirement> foundRequirements = new List<Requirement>();
    
    //state of the expansion pannels
    bool searchResultsExpanded = false;
    bool detailsExpanded = true;
    
    //Is the requirement selected from the tree or is it selected from the search?
    SelectionMode _selectionMode = SelectionMode.NoSelection;
    RequirementState _requirementState = RequirementState.None;

    protected override void OnInitialized()
    {
        RR.OnStartLoadingRequirements += OnStartLoadingRequirements;
        RR.OnEndLoadingRequirements += OnEndLoadingRequirements;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RR.GetAllRequirements();    //Placed here to have the page rendering before data are retrieved
        }
    }

    public void Dispose()
    {
        RR.OnStartLoadingRequirements -= OnStartLoadingRequirements;
        RR.OnEndLoadingRequirements -= OnEndLoadingRequirements;
    }

    private void OnStartLoadingRequirements(object sender, EventArgs e)
    {
        requirementsAreLoading = true;
        StateHasChanged();
    }

    private void OnEndLoadingRequirements(object sender, EventArgs e)
    {
        requirementsAreLoading = false;
        
        //Calculates some statistics to visually check if something odd happened
        //during the loading
        int cumulReqs = 0;
        int cumulFolders = 0;
        GetStatistics(RR.GetAllCachedRequirements().FirstOrDefault(), ref cumulReqs, ref cumulFolders);
        requirementsStatistics = new();
        requirementsStatistics.Add("TotalReqs", cumulReqs);
        requirementsStatistics.Add("TotalFolders", cumulFolders);

        StateHasChanged();
    }

    private async Task OnTreeItemSelectedAsync(TreeItemData selectedValue)
    {
        requirementsStatistics = null;
        _selectedItem = selectedValue;

        if (!_selectedItem.IsFolder)
        {
            _selectionMode = SelectionMode.SelectedFromTreeReq;
            _requirementState = RequirementState.ReadOrUpdate;
            await LoadRequirementFromUrl(selectedValue.Url);
        }
        else
        {
            _selectionMode = SelectionMode.SelectedFromTreeFolder;
            _requirementState = RequirementState.None;
        }
    }

    private async Task OnNewRequirementAsync()
    {
        //NewIdResult newId = await ApiClient.GetNewIdAsync();

        model.Components.Clear();
        model.Changelog = string.Empty;
        model.Description = string.Empty;
        model.Title = await IdProvider.GetNewIdAsync(RR.GetAllCachedRequirements()); //Helpers.RequirementsHelper.GetNewId(RR.GetAllCachedRequirements());
        model.CreatedInVersion = string.Empty;
        model.DeprecatedInVersion = string.Empty;
        model.SoftwareUnits.Clear();
        model.AssociatedProtocolsIds = string.Empty;
        model.TypeOfRequirement = string.Empty;
        model.Guid = string.Empty;
        model.IsSafety = false;
        model.SRAIds = string.Empty;
        selectedComponents.Clear();
        selectedSU.Clear();     
        selectedRequirement = null;  
        if (mdDescription != null)
        {
            await mdDescription.SetValueAsync(string.Empty);
        }
        if (mdChangelog != null)
        {
            await mdChangelog.SetValueAsync(string.Empty);
        }

        _requirementState = RequirementState.New;
    }

    private async Task OnDeleteAsync()
    {
        DialogResult result = await DisplayDeletionDialogAsync();

        if (!result.Canceled)
        {
            bool physicalDeletionOk = RR.DeleteRequirement(selectedRequirement.Url);
            if (physicalDeletionOk)
            {
                Snackbar.Add("Requirement deleted.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Requirement deletion failed.", Severity.Error);
            }
        }
    }

    private async Task<DialogResult> DisplayDeletionDialogAsync()
    {
        var parameters = new DialogParameters<GenericConfirmationDialog>();
        parameters.Add(x => x.ContentText, $"Do you really want to delete this requirement? It cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<GenericConfirmationDialog>("Delete", parameters, options);
        
        return await dialog.Result;
    }

    private async Task OnSelectComponentsAsync()
    {
        IEnumerable<string> allComponents = BS.GetAll(Configuration.Value.ComponentsSetting);
        DialogResult result = await DisplayComponentsSelectorDialogAsync(allComponents);

        if (!result.Canceled)
        {
            HashSet<string> results = result.Data as HashSet<string> ?? new HashSet<string>();
            selectedComponents.AddRange(results.ToList());
        }
    }

    private void OnTreeLoading()
    {
        treeIsLoading = true;
    }

    private void OnTreeLoaded()
    {
        treeIsLoading = false;
    }

    private void OnSearch(SearchInstructions searchCriteria)
    {
        foundRequirements = SR.Search(searchCriteria);
        searchResultsExpanded = true;
    }

    private async Task OnSearchResultSelectedAsync(Requirement requirement)
    {
        _selectionMode = SelectionMode.SelectedFromSearch;
        _requirementState = RequirementState.ReadOrUpdate;
        await LoadRequirementFromUrl(requirement.Url);
    }

    private void OnSearchResultsExpansionChanged(bool newState)
    {
        searchResultsExpanded = newState;
    }
    private void OnDetailsExpansionChanged(bool newState)
    {
        detailsExpanded = newState;
    }

    private void UnselectComponent(MudChip chip) => selectedComponents.Remove(chip.Text);

    private async Task OnSelectSUsAsync()
    {
        IEnumerable<string> allSU = BS.GetAll(Configuration.Value.SoftwareUnitsSetting);
        DialogResult result = await DisplayComponentsSelectorDialogAsync(allSU);

        if (!result.Canceled)
        {
            HashSet<string> results = result.Data as HashSet<string> ?? new HashSet<string>();
            selectedSU.AddRange(results.ToList());
        }
    }

    private  void UnselectSU(MudChip chip) => selectedSU.Remove(chip.Text);

    Task OnMarkdownDescrChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownChlogChanged(string value)
    {
        return Task.CompletedTask;
    }

    private void OnValidSubmit(EditContext context)
    {
        //success = true;

        RequirementEditionForm formContext = context.Model as RequirementEditionForm;

        if (selectedRequirement == null)
        {
            selectedRequirement = new Requirement();
        }

        selectedRequirement.Guid = string.IsNullOrEmpty(formContext.Guid) ? Guid.NewGuid().ToString() : formContext.Guid; 
        selectedRequirement.Id = Helpers.RequirementsHelper.GetId(formContext.Title);
        selectedRequirement.Title = Helpers.RequirementsHelper.GetTitle(formContext.Title, Configuration.Value.FileExtension);
        selectedRequirement.TypeOfRequirement = formContext.TypeOfRequirement;
        selectedRequirement.Components = selectedComponents;
        selectedRequirement.SoftwareUnits = selectedSU;
        selectedRequirement.SRAIds = formContext.SRAIds;
        selectedRequirement.CreatedInVersion = formContext.CreatedInVersion;
        selectedRequirement.DeprecatedInVersion = formContext.DeprecatedInVersion;
        selectedRequirement.IsSafety = formContext.IsSafety;
        selectedRequirement.Description = formContext.Description;
        selectedRequirement.Changelog = formContext.Changelog;
        selectedRequirement.AssociatedProtocolsIds = formContext.AssociatedProtocolsIds;

        string folderUrl = string.Empty;
        if (_selectedItem != null && _selectedItem.IsFolder)
        {
            folderUrl = _selectedItem.Url;
        }
        else if (_selectedItem == null)
        {
            folderUrl = Configuration.Value.RequirementsFolderLocation;
        }
        else
        {
            folderUrl = Path.GetDirectoryName(_selectedItem.Url);
        }

        string requirementFormerUrl = selectedRequirement.Url;

        string requirementUrl = RR.SaveRequirement(selectedRequirement, folderUrl);
        if (string.IsNullOrEmpty(requirementUrl))
        {
            Snackbar.Add("Saving didn't go as expected. Please check your git diff.", Severity.Success);
        }
        else
        {
            if (fileBrowser != null)
            {
                fileBrowser.UpdateTreeWithNewRequirement(selectedRequirement, requirementFormerUrl);
            }
            Snackbar.Add("Requirement saved.", Severity.Success);
        }
    }

    private async Task<DialogResult> DisplayComponentsSelectorDialogAsync(IEnumerable<string> allItems)
    {
        var parameters = new DialogParameters<SettingsSelectorDialog>();
        parameters.Add(x => x.AllItems, allItems.ToHashSet());

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large };

        var dialog = await DialogService.ShowAsync<SettingsSelectorDialog>("Selection", parameters, options);
        
        return await dialog.Result;      
    }

    private async Task LoadRequirementFromUrl(string url)
    {
        Requirement selectedReq = RR.GetRequirement(url);
        selectedRequirement = selectedReq;

        MapRequirementToModel(selectedReq);
        await mdDescription.SetValueAsync(selectedReq.Description);
        await mdChangelog.SetValueAsync(selectedReq.Changelog);
    }

    private void MapRequirementToModel(Requirement req)
    {
        model.Guid = req.Guid;
        model.Title = string.Concat(req.Id, " ", req.Title);
        model.IsSafety = req.IsSafety;
        model.TypeOfRequirement = req.TypeOfRequirement;
        model.CreatedInVersion = req.CreatedInVersion;
        model.DeprecatedInVersion = req.DeprecatedInVersion;
        model.SoftwareUnits = req.SoftwareUnits;
        selectedSU = req.SoftwareUnits;
        model.Components = req.Components;
        selectedComponents = req.Components;
        model.Changelog = req.Changelog;
        model.AssociatedProtocolsIds = req.AssociatedProtocolsIds;
        model.Description = req.Description;
        model.SRAIds = req.SRAIds;
    }

    private static void GetStatistics(Folder startPoint, ref int cumulReqs, ref int cumulFolders)
    {
        cumulReqs += startPoint.FolderItems.Count();
        cumulFolders++;
        foreach (Folder subfolder in startPoint.SubFolders)
        {
            GetStatistics(subfolder, ref cumulReqs, ref cumulFolders);
        }
    }
}