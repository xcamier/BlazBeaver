@page "/rootrequirements"

@using Data;
@using System.ComponentModel.DataAnnotations;
@using BlazBeaver.Interfaces;
@using BlazBeaver.Components;

@inject IRequirementsRepository RR;
@inject IDialogService DialogService;
@inject IBasicsSettingsRepository BS;

<PageTitle>Requirements</PageTitle>

<h1>Requirements</h1>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudGrid>
        @if (@loadingError)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Meltdown is imminent</MudAlert>
            </MudItem>
        }
        <MudItem xs="4">
            <MudPaper>
                <FileBrowser OnTreeItemSelected="OnTreeItemSelected" />
            </MudPaper>
        </MudItem>

        <MudItem xs="8">
            <MudCard>
                @if (@loadingError)
                {
                    <MudCardHeader>
                        <MudText>Error when loading the req</MudText>
                    </MudCardHeader>
                }

                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField Label="Title" Required="true" RequiredError="Requirement title is required!" 
                                            @bind-Value="model.Title" For="@(() => model.Title)"/>
                        </MudItem>
                        <MudItem xs="4">
                            <MudCheckBox @bind-value="model.IsSafety" For="@(() => model.IsSafety)">Safety Risk</MudCheckBox>
                        </MudItem>
                        <MudItem xs="8">
                            <MudSelect Placeholder="Type of Requirement" @bind-Value="model.TypeOfRequirement" For="@(() => model.TypeOfRequirement)">
                                <MudSelectItem Value="@("Functional")" />
                                <MudSelectItem Value="@("Technical")" />
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                           <MudTextField Label="SRA Ids" Required="false"
                                            @bind-Value="model.SRAIds" For="@(() => model.SRAIds)"/>
                        </MudItem>
                        <MudItem xs="6">
                           <MudTextField Label="Created in version" Required="false"
                                            @bind-Value="model.CreatedInVersion" For="@(() => model.CreatedInVersion)"/>
                        </MudItem>
                        <MudItem xs="6">
                           <MudTextField Label="Deprecated in version" Required="false"
                                            @bind-Value="model.DeprecatedInVersion" For="@(() => model.DeprecatedInVersion)"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudChipSet AllClosable="true" OnClose="UnselectComponent">
                                @foreach (var value in selectedComponents)
                                {
                                    <MudChip Text="@value"></MudChip>
                                }
                            </MudChipSet>
                            Components <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OnSelectComponentsAsync"></MudIconButton>
                        </MudItem>
                        <MudItem xs="6">
                            <MudChipSet AllClosable="true" OnClose="UnselectSU">
                                @foreach (var value in selectedSU)
                                {
                                    <MudChip Text="@value"></MudChip>
                                }
                            </MudChipSet>
                            Software Units <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OnSelectSUsAsync"></MudIconButton>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText>Requirement Description</MudText>
                            <MarkdownEditor @bind-Value="@model.Description"
                                            @ref="mdDescription" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudText>Requirement Changelog</MudText>
                            <MarkdownEditor @bind-Value="@model.Changelog"
                                            @ref="mdChangelog" />
                        </MudItem>
                        <MudItem xs="12">
                           <MudTextField Label="Protocols Ids" Required="false"
                                            @bind-Value="model.AssociatedProtocolsIds" For="@(() => model.AssociatedProtocolsIds)"/>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton  MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        
    </MudGrid>
</EditForm>


@code {
    MarkdownEditor mdDescription;
    MarkdownEditor mdChangelog;

    private TreeItemData _selectedItem; 

    string[] errors = { };

    bool loadingError = false;

    RequirementEditionForm model = new RequirementEditionForm();
    Requirement selectedRequirement;

    List<string> selectedComponents = new List<string>();
    List<string> selectedSU = new List<string>();

    private void OnTreeItemSelected(TreeItemData selectedValue)
    {
        _selectedItem = selectedValue;
    }

    private async Task OnSelectComponentsAsync()
    {
        IEnumerable<string> allComponents = BS.GetAll(Helpers.FilesSettings.ComponentsSetting);
        DialogResult result = await DisplayComponentsSelectorDialogAsync(allComponents);

        if (!result.Canceled)
        {
            HashSet<string> results = result.Data as HashSet<string> ?? new HashSet<string>();
            selectedComponents.AddRange(results.ToList());
        }
    }

    private void UnselectComponent(MudChip chip) => selectedComponents.Remove(chip.Text);

    private async Task OnSelectSUsAsync()
    {
            IEnumerable<string> allSU = BS.GetAll(Helpers.FilesSettings.SoftwareUnitsSetting);
            DialogResult result = await DisplayComponentsSelectorDialogAsync(allSU);

            if (!result.Canceled)
            {
                HashSet<string> results = result.Data as HashSet<string> ?? new HashSet<string>();
                selectedSU.AddRange(results.ToList());
            }
    }

    private  void UnselectSU(MudChip chip) => selectedSU.Remove(chip.Text);

    private async Task FlushValues()
    {
        model.Title = string.Empty;
        model.Description = string.Empty;
        model.Changelog = string.Empty;

        await mdDescription.SetValueAsync(model.Description);
        await mdChangelog.SetValueAsync(model.Changelog);
    }

    Task OnMarkdownDescrChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownChlogChanged(string value)
    {
        return Task.CompletedTask;
    }

    private void OnValidSubmit(EditContext context)
    {
        //success = true;

        RequirementEditionForm formContext = context.Model as RequirementEditionForm;

        if (selectedRequirement == null)
        {
            selectedRequirement = new Requirement();
        }

        selectedRequirement.Guid = string.IsNullOrEmpty(formContext.Guid) ? Guid.NewGuid().ToString() : formContext.Guid; 
        selectedRequirement.Id = Helpers.TitleAndIdTransformation.GetId(formContext.Title);
        selectedRequirement.Title = Helpers.TitleAndIdTransformation.GetTitle(formContext.Title);
        selectedRequirement.Components = selectedComponents;
        selectedRequirement.SoftwareUnits = selectedSU;
        selectedRequirement.SRAIds = formContext.SRAIds;
        selectedRequirement.CreatedInVersion = formContext.CreatedInVersion;
        selectedRequirement.DeprecatedInVersion = formContext.DeprecatedInVersion;
        selectedRequirement.IsSafety = formContext.IsSafety;
        selectedRequirement.Description = formContext.Description;
        selectedRequirement.Changelog = formContext.Changelog;
        selectedRequirement.AssociatedProtocolsIds = formContext.AssociatedProtocolsIds;

        string folderUrl = string.Empty;
        if (_selectedItem != null && _selectedItem.IsFolder)
        {
            folderUrl = _selectedItem.Url;
        }
        else
        {
            folderUrl = Helpers.FilesSettings.RequirementsFolderLocation;
        }

        RR.CreateRequirement(selectedRequirement, folderUrl);
    }

    private async Task<DialogResult> DisplayComponentsSelectorDialogAsync(IEnumerable<string> allItems)
    {
        var parameters = new DialogParameters<SettingsSelectorDialog>();
        parameters.Add(x => x.AllItems, allItems.ToHashSet());

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large };

        var dialog = await DialogService.ShowAsync<SettingsSelectorDialog>("Selection", parameters, options);
        
        return await dialog.Result;      
    }
}